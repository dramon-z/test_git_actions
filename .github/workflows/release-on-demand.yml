name: on-demand

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Nombre del tag (opcional)'
        required: false
      repositorio:
        description: 'Nombre del repositorio (en formato "usuario/repositorio")'
        required: true

jobs:
  job1:
    runs-on: ubuntu-latest

    steps:
      - name: Configurar autenticación
        uses: actions/checkout@v2

      - name: Obtener último tag
        id: obtener-ultimo-tag
        if: ${{ github.event.inputs.tag == '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          
          latest_tag=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.event.inputs.repositorio }}/tags" | jq -r '.[].name' | sort -V | tail -n1)
          echo "$latest_tag"
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      - name: Verificar Tag
        id: verificar-tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_to_check=${{ github.event.inputs.tag }}
          if [[ -z "$tag_to_check" ]]; then
            tag_to_check=$LATEST_TAG
          fi
          echo "TAG: $tag_to_check"

          response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.event.inputs.repositorio }}/git/refs/tags/$tag_to_check")
          echo "$response"
          
          if [[ "$response" == "200" ]]; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

          if [[ "${{ env.TAG_EXISTS }}" == "true" ]]; then
            echo "El tag $tag_to_check existe en el repositorio ${{ github.event.inputs.repositorio }}"
          else
            echo "El tag $tag_to_check NO existe en el repositorio ${{ github.event.inputs.repositorio }}"
          fi
  # job2:
  #   needs: job1
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Docker Tag
  #       id: docker-tag
  #       if: needs.verificar-tag.outputs.TAG_EXISTS == 'true'
  #       run: |
  #         docker tag ${{ secrets.registry.service.name }}:${{ inputs.versionPROD }}-RC ${{ secrets.registry.service.name }}:${{ inputs.versionPROD }}
  # job3:
  #   needs: job2
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Docker Push
  #       id: docker-push
  #       if: needs.docker-tag.outputs.return-value == '0'
  #       run: |
  #         docker push ${{ secrets.registry.service.name }}:${{ inputs.versionPROD }}
